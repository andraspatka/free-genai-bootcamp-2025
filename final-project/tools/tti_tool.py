from .schemas import TTIInputSchema, TTIOutputSchema
from .s3_tool import upload_to_s3 # Assuming s3_tool handles upload
import openai
import os
from dotenv import load_dotenv
import logging
import uuid
import requests

logger = logging.getLogger(__name__)
load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
OPENAI_IMAGE_MODEL_NAME = os.getenv("OPENAI_IMAGE_MODEL_NAME", "dall-e-3")

if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY not configured. TTI tool will not function.")
if not S3_BUCKET_NAME:
     logger.warning("S3_BUCKET_NAME not configured. TTI tool cannot upload images.")

openai.api_key = OPENAI_API_KEY

def generate_image(input_data: TTIInputSchema) -> TTIOutputSchema:
    """Generates an image using OpenAI DALL-E and uploads it to S3."""
    logger.info(f"Generating image for prompt: {input_data.prompt[:100]}...")

    if not OPENAI_API_KEY or not S3_BUCKET_NAME:
        logger.error("OpenAI API key or S3 bucket not configured.")
        return TTIOutputSchema(s3_path="error/not_configured.png", prompt_used=input_data.prompt)

    try:
        client = openai.OpenAI() # Use new client initialization
        response = client.images.generate(
            model=OPENAI_IMAGE_MODEL_NAME,
            prompt=input_data.prompt,
            n=1, # Generate one image
            size="1024x1024", # Standard size for DALL-E 3
            response_format="url" # Get URL to download the image
        )

        if response.data and response.data[0].url:
            image_url = response.data[0].url
            logger.info(f"Image generated by OpenAI, URL: {image_url}")

            # Download the image from the URL
            try:
                image_response = requests.get(image_url, stream=True, timeout=30)
                image_response.raise_for_status()
                image_data = image_response.content
                content_type = image_response.headers.get('content-type', 'image/png') # Default to png if not specified
                file_extension = content_type.split('/')[-1] if '/' in content_type else 'png'

            except requests.exceptions.RequestException as download_err:
                 logger.error(f"Failed to download generated image from URL {image_url}: {download_err}")
                 return TTIOutputSchema(s3_path=f"error/download_failed.{file_extension}", prompt_used=input_data.prompt)

            # Generate unique S3 key
            unique_id = uuid.uuid4()
            s3_key = f"{input_data.s3_path_prefix}/{input_data.output_filename_prefix}_{unique_id}.{file_extension}"

            logger.info(f"Uploading generated image to S3: {s3_key}")
            upload_response = upload_to_s3(
                file_content=image_data,
                s3_key=s3_key,
                content_type=content_type
            )

            if upload_response.s3_path:
                logger.info(f"Successfully generated and uploaded image to {upload_response.s3_path}")
                return TTIOutputSchema(
                    s3_path=upload_response.s3_path,
                    prompt_used=input_data.prompt
                )
            else:
                logger.error("Failed to upload generated image to S3.")
                return TTIOutputSchema(s3_path=f"error/upload_failed.{file_extension}", prompt_used=input_data.prompt)

        else:
            logger.error("OpenAI API did not return image data or URL.")
            # Attempt to extract potential error message if available
            error_message = str(response) # Crude error logging
            logger.error(f"OpenAI Response: {error_message}")
            return TTIOutputSchema(s3_path="error/no_image_data.png", prompt_used=input_data.prompt)

    except openai.APIError as api_err:
        logger.error(f"OpenAI API Error: {api_err}", exc_info=True)
        return TTIOutputSchema(s3_path="error/openai_api_error.png", prompt_used=input_data.prompt)
    except Exception as e:
        logger.error(f"Error during Text-to-Image generation: {e}", exc_info=True)
        return TTIOutputSchema(s3_path=f"error/exception_{type(e).__name__}.png", prompt_used=input_data.prompt)

# Example usage (for testing)
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    # Ensure OpenAI API key and S3 bucket are in .env or environment variables
    test_input = TTIInputSchema(
        prompt="A cute cartoon owl reading a book about the Italian language, digital art style",
        output_filename_prefix="test_owl_reading",
        s3_path_prefix="test_images"
    )
    output = generate_image(test_input)
    print(output.model_dump_json(indent=2))
